import random
from ..core.data_manager import DataManager

class Farm:
    def __init__(self, data_manager: DataManager):
        self.data_manager = data_manager
        self.field = self.data_manager.get_farm_data()["field"]
        self.inventory = self.data_manager.get_farm_data()["inventory"]
        self.money = self.data_manager.get_farm_data()["money"]
        self.seeds = self.data_manager.get_farm_data()["seeds"]
        self.level = self.data_manager.get_farm_data().get("level", 1)
        self.experience = self.data_manager.get_farm_data().get("experience", 0)
        self.achievements = self.data_manager.get_farm_data().get("achievements", {})
        self.tools = self.data_manager.get_farm_data().get("tools", {
            "–ª–æ–ø–∞—Ç–∞": {"level": 1, "price": 50},
            "–ª–µ–π–∫–∞": {"level": 1, "price": 30},
            "—É–¥–æ–±—Ä–µ–Ω–∏–µ": {"level": 1, "price": 40}
        })
        self.weather = self.data_manager.get_farm_data().get("weather", "—Å–æ–ª–Ω–µ—á–Ω–æ")
        self.season = self.data_manager.get_farm_data().get("season", "–≤–µ—Å–Ω–∞")
        self.crops = {
            "–º–æ—Ä–∫–æ–≤—å": {"time": 3, "price": 10, "sell": 15, "emoji": "ü•ï", "season": ["–≤–µ—Å–Ω–∞", "–æ—Å–µ–Ω—å"]},
            "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": {"time": 5, "price": 15, "sell": 25, "emoji": "ü•î", "season": ["–≤–µ—Å–Ω–∞", "–ª–µ—Ç–æ"]},
            "–ø–æ–º–∏–¥–æ—Ä": {"time": 4, "price": 20, "sell": 35, "emoji": "üçÖ", "season": ["–ª–µ—Ç–æ"]},
            "–æ–≥—É—Ä–µ—Ü": {"time": 4, "price": 25, "sell": 40, "emoji": "ü•í", "season": ["–ª–µ—Ç–æ"]},
            "–±–∞–∫–ª–∞–∂–∞–Ω": {"time": 6, "price": 30, "sell": 50, "emoji": "üçÜ", "season": ["–ª–µ—Ç–æ"]},
            "—Ç—ã–∫–≤–∞": {"time": 7, "price": 40, "sell": 70, "emoji": "üéÉ", "season": ["–æ—Å–µ–Ω—å"]},
            "–∫–∞–ø—É—Å—Ç–∞": {"time": 5, "price": 35, "sell": 60, "emoji": "ü•¨", "season": ["–æ—Å–µ–Ω—å"]},
            "—á–µ—Å–Ω–æ–∫": {"time": 4, "price": 20, "sell": 35, "emoji": "üßÑ", "season": ["–≤–µ—Å–Ω–∞", "–æ—Å–µ–Ω—å"]}
        }
        self.field_emojis = {
            "–ø—É—Å—Ç–æ": "‚¨ú",
            "–º–æ—Ä–∫–æ–≤—å": "ü•ï",
            "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": "ü•î",
            "–ø–æ–º–∏–¥–æ—Ä": "üçÖ",
            "–æ–≥—É—Ä–µ—Ü": "ü•í",
            "–±–∞–∫–ª–∞–∂–∞–Ω": "üçÜ",
            "—Ç—ã–∫–≤–∞": "üéÉ",
            "–∫–∞–ø—É—Å—Ç–∞": "ü•¨",
            "—á–µ—Å–Ω–æ–∫": "üßÑ",
            "—Ä–æ—Å—Ç–æ–∫": "üå±",
            "—Ä–∞—Å—Ç—É—â–∏–π": "üåø",
            "—É–¥–æ–±—Ä–µ–Ω–Ω—ã–π": "üíö"
        }
        self.weather_effects = {
            "—Å–æ–ª–Ω–µ—á–Ω–æ": {"growth": 1.0, "emoji": "‚òÄÔ∏è"},
            "–¥–æ–∂–¥–ª–∏–≤–æ": {"growth": 1.5, "emoji": "üåßÔ∏è"},
            "–ø–∞—Å–º—É—Ä–Ω–æ": {"growth": 0.8, "emoji": "‚òÅÔ∏è"},
            "–∑–∞—Å—É—Ö–∞": {"growth": 0.5, "emoji": "üåµ"}
        }
        self.seasons = {
            "–≤–µ—Å–Ω–∞": {"emoji": "üå∏", "weather": ["—Å–æ–ª–Ω–µ—á–Ω–æ", "–¥–æ–∂–¥–ª–∏–≤–æ"]},
            "–ª–µ—Ç–æ": {"emoji": "‚òÄÔ∏è", "weather": ["—Å–æ–ª–Ω–µ—á–Ω–æ", "–∑–∞—Å—É—Ö–∞"]},
            "–æ—Å–µ–Ω—å": {"emoji": "üçÇ", "weather": ["–ø–∞—Å–º—É—Ä–Ω–æ", "–¥–æ–∂–¥–ª–∏–≤–æ"]},
            "–∑–∏–º–∞": {"emoji": "‚ùÑÔ∏è", "weather": ["–ø–∞—Å–º—É—Ä–Ω–æ"]}
        }

    def save_game(self) -> bool:
        farm_data = {
            "field": self.field,
            "inventory": self.inventory,
            "money": self.money,
            "seeds": self.seeds,
            "level": self.level,
            "experience": self.experience,
            "achievements": self.achievements,
            "tools": self.tools,
            "weather": self.weather,
            "season": self.season
        }
        return self.data_manager.update_farm_data(farm_data)

    def load_game(self):
        farm_data = self.data_manager.get_farm_data()
        self.field = farm_data["field"]
        self.inventory = farm_data["inventory"]
        self.money = farm_data["money"]
        self.seeds = farm_data["seeds"]
        self.level = farm_data.get("level", 1)
        self.experience = farm_data.get("experience", 0)
        self.achievements = farm_data.get("achievements", {})
        self.tools = farm_data.get("tools", {
            "–ª–æ–ø–∞—Ç–∞": {"level": 1, "price": 50},
            "–ª–µ–π–∫–∞": {"level": 1, "price": 30},
            "—É–¥–æ–±—Ä–µ–Ω–∏–µ": {"level": 1, "price": 40}
        })
        self.weather = farm_data.get("weather", "—Å–æ–ª–Ω–µ—á–Ω–æ")
        self.season = farm_data.get("season", "–≤–µ—Å–Ω–∞")

    def add_experience(self, amount: int):
        self.experience += amount
        exp_needed = self.level * 100
        if self.experience >= exp_needed:
            self.level_up()
        self.save_game()

    def level_up(self):
        self.level += 1
        self.experience = 0
        print(f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {self.level} —É—Ä–æ–≤–Ω—è!")
        print("–î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è!")
        self.check_achievements()

    def check_achievements(self):
        achievements = {
            "first_harvest": {"name": "–ü–µ—Ä–≤—ã–π —É—Ä–æ–∂–∞–π", "condition": lambda: sum(self.inventory.values()) > 0},
            "rich_farmer": {"name": "–ë–æ–≥–∞—Ç—ã–π —Ñ–µ—Ä–º–µ—Ä", "condition": lambda: self.money >= 1000},
            "master_farmer": {"name": "–ú–∞—Å—Ç–µ—Ä-—Ñ–µ—Ä–º–µ—Ä", "condition": lambda: self.level >= 5},
            "crop_collector": {"name": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –∫—É–ª—å—Ç—É—Ä", "condition": lambda: len(self.inventory) >= 5}
        }
        
        for ach_id, ach_data in achievements.items():
            if ach_id not in self.achievements and ach_data["condition"]():
                self.achievements[ach_id] = True
                print(f"\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {ach_data['name']}!")
                self.money += 100

    def update_weather(self):
        season_weathers = self.seasons[self.season]["weather"]
        self.weather = random.choice(season_weathers)
        print(f"\nüå§Ô∏è –ü–æ–≥–æ–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {self.weather_effects[self.weather]['emoji']} {self.weather}")

    def change_season(self):
        seasons = list(self.seasons.keys())
        current_index = seasons.index(self.season)
        next_index = (current_index + 1) % len(seasons)
        self.season = seasons[next_index]
        print(f"\nüåç –°–º–µ–Ω–∞ —Å–µ–∑–æ–Ω–∞: {self.seasons[self.season]['emoji']} {self.season}")
        self.update_weather()

    def grow_crops(self):
        weather_effect = self.weather_effects[self.weather]["growth"]
        for i in range(len(self.field)):
            for j in range(len(self.field[i])):
                if self.field[i][j] != "–ø—É—Å—Ç–æ":
                    crop = self.field[i][j]
                    if isinstance(crop, dict) and "time" in crop:
                        crop["time"] -= weather_effect
                        if crop["time"] <= 0:
                            self.field[i][j] = crop["name"]
                            self.add_experience(10)
        self.save_game()

    def show_field(self):
        print(f"\n=== üåæ –§–µ—Ä–º–∞ (–£—Ä–æ–≤–µ–Ω—å {self.level}) ===")
        print(f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {self.weather_effects[self.weather]['emoji']} {self.weather}")
        print(f"üåç –°–µ–∑–æ–Ω: {self.seasons[self.season]['emoji']} {self.season}")
        print("  1 2 3 4 5")
        for i, row in enumerate(self.field):
            print(f"{i+1}", end=" ")
            for cell in row:
                if cell == "–ø—É—Å—Ç–æ":
                    print(self.field_emojis["–ø—É—Å—Ç–æ"], end=" ")
                elif isinstance(cell, dict):
                    if cell.get("fertilized"):
                        print(self.field_emojis["—É–¥–æ–±—Ä–µ–Ω–Ω—ã–π"], end=" ")
                    elif cell["time"] > 1:
                        print(self.field_emojis["—Ä–æ—Å—Ç–æ–∫"], end=" ")
                    else:
                        print(self.field_emojis["—Ä–∞—Å—Ç—É—â–∏–π"], end=" ")
                else:
                    print(self.field_emojis[cell], end=" ")
            print()
        print("\n–õ–µ–≥–µ–Ω–¥–∞:")
        print("‚¨ú - –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞")
        print("üå± - –†–æ—Å—Ç–æ–∫")
        print("üåø - –†–∞—Å—Ç—É—â–∞—è –∫—É–ª—å—Ç—É—Ä–∞")
        print("üíö - –£–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞")
        for crop, data in self.crops.items():
            print(f"{data['emoji']} - {crop}")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def plant_crop(self):
        print("\n=== üå± –ü–æ—Å–∞–¥–∫–∞ ===")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–º–µ–Ω–∞:")
        crops_list = [(crop, data) for crop, data in self.crops.items() 
                     if crop in self.seeds and self.season in data["season"]]
        
        if not crops_list:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º—è–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return

        for i, (crop, data) in enumerate(crops_list, 1):
            print(f"{i}. {data['emoji']} {crop}: {self.seeds[crop]} —à—Ç.")
        print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É (–Ω–æ–º–µ—Ä): "))
            if choice == 0:
                return
            if not (1 <= choice <= len(crops_list)):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return
            
            crop, data = crops_list[choice-1]
            if self.seeds[crop] <= 0:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ–º—è–Ω")
                return
            
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ (—Å—Ç—Ä–æ–∫–∞ –∏ —Å—Ç–æ–ª–±–µ—Ü –æ—Ç 1 –¥–æ 5):")
            row = int(input("–°—Ç—Ä–æ–∫–∞: ")) - 1
            col = int(input("–°—Ç–æ–ª–±–µ—Ü: ")) - 1
            
            if not (0 <= row < 5 and 0 <= col < 5):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                return
            
            if self.field[row][col] != "–ø—É—Å—Ç–æ":
                print("‚ùå –≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ")
                return
            
            fertilized = False
            if self.tools["—É–¥–æ–±—Ä–µ–Ω–∏–µ"]["level"] > 1:
                use_fertilizer = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–æ–±—Ä–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ").lower() == "–¥–∞"
                if use_fertilizer:
                    fertilized = True
                    print("‚úÖ –£–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!")
            
            self.field[row][col] = {
                "name": crop,
                "time": data["time"],
                "fertilized": fertilized
            }
            self.seeds[crop] -= 1
            if not self.save_game():
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                self.load_game()
            else:
                print(f"‚úÖ {data['emoji']} {crop} –ø–æ—Å–∞–∂–µ–Ω–∞!")
                self.add_experience(5)
            
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def harvest_crop(self):
        print("\n=== üåø –°–±–æ—Ä —É—Ä–æ–∂–∞—è ===")
        harvested = False
        total_harvest = {}
        
        for i in range(len(self.field)):
            for j in range(len(self.field[i])):
                if isinstance(self.field[i][j], str) and self.field[i][j] != "–ø—É—Å—Ç–æ":
                    crop = self.field[i][j]
                    amount = 2 if self.field[i][j].get("fertilized") else 1
                    self.inventory[crop] = self.inventory.get(crop, 0) + amount
                    total_harvest[crop] = total_harvest.get(crop, 0) + amount
                    self.field[i][j] = "–ø—É—Å—Ç–æ"
                    harvested = True
        
        if harvested:
            if not self.save_game():
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                self.load_game()
            else:
                print("‚úÖ –£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω!")
                print("\n–°–æ–±—Ä–∞–Ω–æ:")
                for crop, amount in total_harvest.items():
                    print(f"{self.crops[crop]['emoji']} {crop}: +{amount} —à—Ç.")
                self.add_experience(15)
        else:
            print("‚ùå –ù–µ—á–µ–≥–æ —Å–æ–±–∏—Ä–∞—Ç—å")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def show_inventory(self):
        print("\n=== üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ===")
        print("–£—Ä–æ–∂–∞–π:")
        for crop, amount in self.inventory.items():
            print(f"{self.crops[crop]['emoji']} {crop}: {amount} —à—Ç.")
        
        print("\n–°–µ–º–µ–Ω–∞:")
        for crop, amount in self.seeds.items():
            print(f"{self.crops[crop]['emoji']} {crop}: {amount} —à—Ç.")
        
        print(f"\nüí∞ –î–µ–Ω—å–≥–∏: {self.money} –º–æ–Ω–µ—Ç")
        print(f"üìä –£—Ä–æ–≤–µ–Ω—å: {self.level}")
        print(f"‚≠ê –û–ø—ã—Ç: {self.experience}/{self.level * 100}")
        
        if self.achievements:
            print("\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
            for ach_id in self.achievements:
                print(f"‚Ä¢ {ach_id}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def buy_seeds(self):
        print("\n=== üõí –ú–∞–≥–∞–∑–∏–Ω —Å–µ–º—è–Ω ===")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–º–µ–Ω–∞:")
        crops_list = [(crop, data) for crop, data in self.crops.items() 
                     if self.level >= self.get_crop_level(crop)]
        
        for i, (crop, data) in enumerate(crops_list, 1):
            print(f"{i}. {data['emoji']} {crop}: {data['price']} üí∞")
        print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–Ω–∞ (–Ω–æ–º–µ—Ä): "))
            if choice == 0:
                return
            if not (1 <= choice <= len(crops_list)):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return
            
            crop, data = crops_list[choice-1]
            amount = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: "))
            if amount <= 0:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
                return
            
            total_cost = data["price"] * amount
            if self.money < total_cost:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥")
                return
            
            self.money -= total_cost
            self.seeds[crop] = self.seeds.get(crop, 0) + amount
            if not self.save_game():
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                self.load_game()
            else:
                print(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount} {data['emoji']} {crop}")
                self.add_experience(2)
            
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def get_crop_level(self, crop: str) -> int:
        crop_levels = {
            "–º–æ—Ä–∫–æ–≤—å": 1,
            "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": 1,
            "–ø–æ–º–∏–¥–æ—Ä": 2,
            "–æ–≥—É—Ä–µ—Ü": 2,
            "–±–∞–∫–ª–∞–∂–∞–Ω": 3,
            "—Ç—ã–∫–≤–∞": 3,
            "–∫–∞–ø—É—Å—Ç–∞": 4,
            "—á–µ—Å–Ω–æ–∫": 4
        }
        return crop_levels.get(crop, 1)

    def upgrade_tools(self):
        print("\n=== ‚öíÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        for i, (tool, data) in enumerate(self.tools.items(), 1):
            print(f"{i}. {tool.capitalize()} (–£—Ä–æ–≤–µ–Ω—å {data['level']}) - {data['price']} üí∞")
        print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–Ω–æ–º–µ—Ä): "))
            if choice == 0:
                return
            if not (1 <= choice <= len(self.tools)):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return
            
            tool = list(self.tools.keys())[choice-1]
            tool_data = self.tools[tool]
            
            if self.money < tool_data["price"]:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥")
                return
            
            self.money -= tool_data["price"]
            tool_data["level"] += 1
            tool_data["price"] = int(tool_data["price"] * 1.5)
            
            if not self.save_game():
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                self.load_game()
            else:
                print(f"‚úÖ {tool.capitalize()} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {tool_data['level']}!")
                self.add_experience(20)
            
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def sell_crops(self):
        print("\n=== üí∞ –ü—Ä–æ–¥–∞–∂–∞ —É—Ä–æ–∂–∞—è ===")
        if not any(self.inventory.values()):
            print("‚ùå –ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        print("–î–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–∂–∞–π:")
        crops_list = [(crop, amount) for crop, amount in self.inventory.items() if amount > 0]
        
        for i, (crop, amount) in enumerate(crops_list, 1):
            print(f"{i}. {self.crops[crop]['emoji']} {crop}: {amount} —à—Ç. ({self.crops[crop]['sell']} üí∞ –∑–∞ —à—Ç.)")
        print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É (–Ω–æ–º–µ—Ä): "))
            if choice == 0:
                return
            if not (1 <= choice <= len(crops_list)):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return
            
            crop, amount = crops_list[choice-1]
            sell_amount = int(input(f"–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞—Ç—å (–º–∞–∫—Å. {amount})? "))
            
            if sell_amount <= 0 or sell_amount > amount:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                return
            
            total_earnings = self.crops[crop]["sell"] * sell_amount
            self.money += total_earnings
            self.inventory[crop] -= sell_amount
            
            if not self.save_game():
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                self.load_game()
            else:
                print(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {sell_amount} {self.crops[crop]['emoji']} {crop} –∑–∞ {total_earnings} üí∞")
                self.add_experience(5)
            
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...") 