from datetime import datetime
import random
from colorama import Fore, init, Style

init()

class LifeGamification:
    def __init__(self, data_manager):
        self.data_manager = data_manager
        self.tasks = self.data_manager.get_life_tasks()
        self.level = self.data_manager.get_life_level()
        self.experience = self.data_manager.get_life_experience()
        self.experience_to_next_level = self.level * 100
        self.energy = self.data_manager.get_life_energy()
        self.daily_quests = self.data_manager.get_life_daily_quests()
        self.last_daily_reset = self.data_manager.get_life_last_daily_reset()
        self.check_daily_reset()

    def check_daily_reset(self):
        if not self.last_daily_reset:
            self.last_daily_reset = datetime.now().isoformat()
            self.data_manager.save_life_last_daily_reset(self.last_daily_reset)
            return

        last_reset = datetime.fromisoformat(self.last_daily_reset)
        if (datetime.now() - last_reset).days >= 1:
            self.energy = 100
            self.daily_quests = self.generate_daily_quests()
            self.last_daily_reset = datetime.now().isoformat()
            self.data_manager.save_life_energy(self.energy)
            self.data_manager.save_life_daily_quests(self.daily_quests)
            self.data_manager.save_life_last_daily_reset(self.last_daily_reset)
            print(f"{Fore.GREEN}‚ú® –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å! –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞{Style.RESET_ALL}")

    def generate_daily_quests(self):
        quest_types = [
            ("üèÉ", "–°–ø–æ—Ä—Ç", ["–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É", "–ü—Ä–æ–±–µ–∂–∞—Ç—å 1 –∫–º", "–°–¥–µ–ª–∞—Ç—å 20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π"]),
            ("üìö", "–£—á–µ–±–∞", ["–ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü", "–í—ã—É—á–∏—Ç—å 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç—ã"]),
            ("üíº", "–†–∞–±–æ—Ç–∞", ["–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É", "–°–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ", "–ü–æ–º–æ—á—å –∫–æ–ª–ª–µ–≥–µ"]),
            ("üè†", "–î–æ–º", ["–£–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ", "–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É", "–ü–æ—Å—Ç–∏—Ä–∞—Ç—å –≤–µ—â–∏"]),
            ("üë•", "–û–±—â–µ–Ω–∏–µ", ["–ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É", "–ü–æ–º–æ—á—å –±–ª–∏–∑–∫–∏–º", "–°–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç"])
        ]

        quests = []
        for emoji, category, tasks in random.sample(quest_types, 3):
            quest = {
                "emoji": emoji,
                "category": category,
                "task": random.choice(tasks),
                "completed": False
            }
            quests.append(quest)
        return quests

    def add_task(self):
        if self.energy < 10:
            print(f"{Fore.RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è{Style.RESET_ALL}")
            return

        print(f"\n{Fore.CYAN}=== üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ==={Style.RESET_ALL}")
        task_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ").strip()
        if not task_name:
            print(f"{Fore.RED}‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º{Style.RESET_ALL}")
            return

        task_type = self._select_task_type()
        difficulty = self._select_difficulty()
        deadline = self._input_deadline()

        task = {
            "name": task_name,
            "type": task_type,
            "difficulty": difficulty,
            "deadline": deadline,
            "completed": False,
            "created_at": datetime.now().isoformat(),
            "completed_at": None,
            "energy_cost": 10
        }

        self.tasks.append(task)
        self.energy -= 10
        self.data_manager.save_life_tasks(self.tasks)
        self.data_manager.save_life_energy(self.energy)
        print(f"{Fore.GREEN}‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!{Style.RESET_ALL}")
        print(f"{Fore.CYAN}‚ö° –û—Å—Ç–∞–ª–æ—Å—å —ç–Ω–µ—Ä–≥–∏–∏: {self.energy}{Style.RESET_ALL}")

    def _select_task_type(self):
        print(f"\n{Fore.CYAN}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:{Style.RESET_ALL}")
        print("1. üèÉ –°–ø–æ—Ä—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ")
        print("2. üìö –£—á–µ–±–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ")
        print("3. üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞")
        print("4. üè† –î–æ–º –∏ –±—ã—Ç")
        print("5. üë• –û–±—â–µ–Ω–∏–µ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è")

        while True:
            try:
                choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-5): "))
                types = {
                    1: "–°–ø–æ—Ä—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
                    2: "–£—á–µ–±–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                    3: "–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞",
                    4: "–î–æ–º –∏ –±—ã—Ç",
                    5: "–û–±—â–µ–Ω–∏–µ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
                }
                if 1 <= choice <= 5:
                    return types[choice]
                print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.RED}‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5{Style.RESET_ALL}")

    def _select_difficulty(self):
        print(f"\n{Fore.CYAN}–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:{Style.RESET_ALL}")
        print("1. üå± –ü—Ä–æ—Å—Ç–∞—è (20 –æ–ø—ã—Ç–∞)")
        print("2. üåø –°—Ä–µ–¥–Ω—è—è (40 –æ–ø—ã—Ç–∞)")
        print("3. üå≥ –°–ª–æ–∂–Ω–∞—è (60 –æ–ø—ã—Ç–∞)")

        while True:
            try:
                choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (1-3): "))
                difficulties = {
                    1: ("–ü—Ä–æ—Å—Ç–∞—è", 20),
                    2: ("–°—Ä–µ–¥–Ω—è—è", 40),
                    3: ("–°–ª–æ–∂–Ω–∞—è", 60)
                }
                if 1 <= choice <= 3:
                    return difficulties[choice]
                print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.RED}‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3{Style.RESET_ALL}")

    def _input_deadline(self):
        print(f"\n{Fore.CYAN}–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:{Style.RESET_ALL}")
        print("1. ‚è∞ –°–µ–≥–æ–¥–Ω—è")
        print("2. üìÖ –ó–∞–≤—Ç—Ä–∞")
        print("3. üìÜ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ")
        print("4. üìÖ –ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ")
        print("5. üìÜ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ")

        while True:
            try:
                choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ (1-5): "))
                deadlines = {
                    1: "–°–µ–≥–æ–¥–Ω—è",
                    2: "–ó–∞–≤—Ç—Ä–∞",
                    3: "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ",
                    4: "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ",
                    5: "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
                }
                if 1 <= choice <= 5:
                    return deadlines[choice]
                print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.RED}‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5{Style.RESET_ALL}")

    def complete_task(self):
        if not self.tasks:
            print(f"{Fore.YELLOW}üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á{Style.RESET_ALL}")
            return

        print(f"\n{Fore.CYAN}=== ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ==={Style.RESET_ALL}")
        for i, task in enumerate(self.tasks, 1):
            if not task["completed"]:
                status = "‚è≥" if task["deadline"] == "–°–µ–≥–æ–¥–Ω—è" else "üìÖ"
                print(f"{i}. {status} {task['name']} - {task['type']} ({task['difficulty'][0]})")

        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): "))
            if choice == 0:
                return
            if 1 <= choice <= len(self.tasks):
                task = self.tasks[choice - 1]
                if not task["completed"]:
                    task["completed"] = True
                    task["completed_at"] = datetime.now().isoformat()
                    exp_gained = self._add_experience(task["difficulty"])
                    self.data_manager.save_life_tasks(self.tasks)
                    print(f"{Fore.GREEN}‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!{Style.RESET_ALL}")
                    print(f"{Fore.CYAN}‚≠ê –ü–æ–ª—É—á–µ–Ω–æ {exp_gained} –æ–ø—ã—Ç–∞{Style.RESET_ALL}")
                else:
                    print(f"{Fore.RED}‚ùå –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏{Style.RESET_ALL}")
        except ValueError:
            print(f"{Fore.RED}‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä{Style.RESET_ALL}")

    def show_daily_quests(self):
        if not self.daily_quests:
            print(f"{Fore.YELLOW}üìú –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π{Style.RESET_ALL}")
            return

        print(f"\n{Fore.CYAN}=== üìú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ==={Style.RESET_ALL}")
        for i, quest in enumerate(self.daily_quests, 1):
            status = "‚úÖ" if quest["completed"] else "‚≠ï"
            print(f"{i}. {quest['emoji']} {quest['category']}: {quest['task']} {status}")

    def complete_daily_quest(self, quest_index):
        if not 0 <= quest_index < len(self.daily_quests):
            print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è{Style.RESET_ALL}")
            return

        quest = self.daily_quests[quest_index]
        if quest["completed"]:
            print(f"{Fore.YELLOW}‚ö†Ô∏è –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ{Style.RESET_ALL}")
            return

        quest["completed"] = True
        exp_gained = self._add_experience(("–°—Ä–µ–¥–Ω—è—è", 40))
        self.data_manager.save_life_daily_quests(self.daily_quests)
        print(f"{Fore.GREEN}‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!{Style.RESET_ALL}")
        print(f"{Fore.CYAN}‚≠ê –ü–æ–ª—É—á–µ–Ω–æ {exp_gained} –æ–ø—ã—Ç–∞{Style.RESET_ALL}")

    def show_statistics(self):
        print(f"\n{Fore.CYAN}=== üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ==={Style.RESET_ALL}")
        print(f"{Fore.CYAN}üë§ –£—Ä–æ–≤–µ–Ω—å: {self.level} ‚≠ê")
        print(f"‚≠ê –û–ø—ã—Ç: {int(self.experience)}/{int(self.experience_to_next_level)}")
        print(f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {self.energy}/100")
        
        completed_tasks = sum(1 for task in self.tasks if task["completed"])
        total_tasks = len(self.tasks)
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed_tasks}/{total_tasks}")
        
        if total_tasks > 0:
            completion_rate = (completed_tasks / total_tasks) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.1f}%")
        
        if self.tasks:
            print(f"\n{Fore.CYAN}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:{Style.RESET_ALL}")
            for task in self.tasks[-5:]:
                status = "‚úÖ" if task["completed"] else "‚è≥"
                print(f"{status} {task['name']} - {task['type']} ({task['difficulty'][0]})")

    def _add_experience(self, difficulty):
        _, exp = difficulty
        self.experience = round(self.experience + exp, 0)

        while self.experience >= self.experience_to_next_level:
            self.experience = round(self.experience - self.experience_to_next_level, 0)
            self.level += 1
            self.experience_to_next_level = self.level * 100
            print(f"\n{Fore.GREEN}üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {self.level} —É—Ä–æ–≤–Ω—è!{Style.RESET_ALL}")
            print(f"{Fore.CYAN}‚≠ê –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {int(self.experience)}/{int(self.experience_to_next_level)}{Style.RESET_ALL}")
        
        self.data_manager.save_life_level(self.level)
        self.data_manager.save_life_experience(self.experience)
        return int(exp) 